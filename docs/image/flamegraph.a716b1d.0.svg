<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="1624"><g><title>[[stack]] (10 samples, 0.62%)</title><rect x="0.0000%" y="693" width="0.6158%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.62%)</title><rect x="0.0000%" y="677" width="0.6158%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="10"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.62%)</title><rect x="0.0000%" y="661" width="0.6158%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="10"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.62%)</title><rect x="0.0000%" y="645" width="0.6158%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="10"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;busy_beaver::turing::Tape as core::ops::index::IndexMut&lt;i128&gt;&gt;::index_mut (39 samples, 2.40%)</title><rect x="0.6158%" y="677" width="2.4015%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="39"/><text x="0.8658%" y="687.50">&lt;b..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.74%)</title><rect x="3.0172%" y="677" width="0.7389%" height="15" fill="rgb(232,128,0)" fg:x="49" fg:w="12"/><text x="3.2672%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="677" width="0.0616%" height="15" fill="rgb(207,160,47)" fg:x="61" fg:w="1"/><text x="4.0062%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="661" width="0.0616%" height="15" fill="rgb(228,23,34)" fg:x="61" fg:w="1"/><text x="4.0062%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="645" width="0.0616%" height="15" fill="rgb(218,30,26)" fg:x="61" fg:w="1"/><text x="4.0062%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="629" width="0.0616%" height="15" fill="rgb(220,122,19)" fg:x="61" fg:w="1"/><text x="4.0062%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="613" width="0.0616%" height="15" fill="rgb(250,228,42)" fg:x="61" fg:w="1"/><text x="4.0062%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="597" width="0.0616%" height="15" fill="rgb(240,193,28)" fg:x="61" fg:w="1"/><text x="4.0062%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="581" width="0.0616%" height="15" fill="rgb(216,20,37)" fg:x="61" fg:w="1"/><text x="4.0062%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="565" width="0.0616%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="1"/><text x="4.0062%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="549" width="0.0616%" height="15" fill="rgb(217,207,13)" fg:x="61" fg:w="1"/><text x="4.0062%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="3.7562%" y="533" width="0.0616%" height="15" fill="rgb(231,73,38)" fg:x="61" fg:w="1"/><text x="4.0062%" y="543.50"></text></g><g><title>busy_beaver::turing::Machine::run (22 samples, 1.35%)</title><rect x="3.8177%" y="677" width="1.3547%" height="15" fill="rgb(225,20,46)" fg:x="62" fg:w="22"/><text x="4.0677%" y="687.50"></text></g><g><title>busy_beaver::turing::Machine::step (22 samples, 1.35%)</title><rect x="3.8177%" y="661" width="1.3547%" height="15" fill="rgb(210,31,41)" fg:x="62" fg:w="22"/><text x="4.0677%" y="671.50"></text></g><g><title>busy_beaver::turing::Program::get (12 samples, 0.74%)</title><rect x="4.4335%" y="645" width="0.7389%" height="15" fill="rgb(221,200,47)" fg:x="72" fg:w="12"/><text x="4.6835%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (12 samples, 0.74%)</title><rect x="4.4335%" y="629" width="0.7389%" height="15" fill="rgb(226,26,5)" fg:x="72" fg:w="12"/><text x="4.6835%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (12 samples, 0.74%)</title><rect x="4.4335%" y="613" width="0.7389%" height="15" fill="rgb(249,33,26)" fg:x="72" fg:w="12"/><text x="4.6835%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 0.74%)</title><rect x="4.4335%" y="597" width="0.7389%" height="15" fill="rgb(235,183,28)" fg:x="72" fg:w="12"/><text x="4.6835%" y="607.50"></text></g><g><title>[unknown] (119 samples, 7.33%)</title><rect x="0.6158%" y="693" width="7.3276%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="119"/><text x="0.8658%" y="703.50">[unknown]</text></g><g><title>hashbrown::map::make_hash (45 samples, 2.77%)</title><rect x="5.1724%" y="677" width="2.7709%" height="15" fill="rgb(247,18,42)" fg:x="84" fg:w="45"/><text x="5.4224%" y="687.50">ha..</text></g><g><title>&lt;busy_beaver::turing::Key as core::hash::Hash&gt;::hash (21 samples, 1.29%)</title><rect x="6.6502%" y="661" width="1.2931%" height="15" fill="rgb(241,131,45)" fg:x="108" fg:w="21"/><text x="6.9002%" y="671.50"></text></g><g><title>&lt;busy_beaver::turing::State as core::hash::Hash&gt;::hash (21 samples, 1.29%)</title><rect x="6.6502%" y="645" width="1.2931%" height="15" fill="rgb(249,31,29)" fg:x="108" fg:w="21"/><text x="6.9002%" y="655.50"></text></g><g><title>&lt;busy_beaver::turing::Tape as core::ops::index::Index&lt;i128&gt;&gt;::index (34 samples, 2.09%)</title><rect x="17.5493%" y="405" width="2.0936%" height="15" fill="rgb(225,111,53)" fg:x="285" fg:w="34"/><text x="17.7993%" y="415.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.80%)</title><rect x="18.8424%" y="389" width="0.8005%" height="15" fill="rgb(238,160,17)" fg:x="306" fg:w="13"/><text x="19.0924%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.80%)</title><rect x="18.8424%" y="373" width="0.8005%" height="15" fill="rgb(214,148,48)" fg:x="306" fg:w="13"/><text x="19.0924%" y="383.50"></text></g><g><title>&lt;busy_beaver::turing::Tape as core::ops::index::IndexMut&lt;i128&gt;&gt;::index_mut (43 samples, 2.65%)</title><rect x="19.6429%" y="405" width="2.6478%" height="15" fill="rgb(232,36,49)" fg:x="319" fg:w="43"/><text x="19.8929%" y="415.50">&lt;b..</text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="22.2291%" y="389" width="0.0616%" height="15" fill="rgb(209,103,24)" fg:x="361" fg:w="1"/><text x="22.4791%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="22.2291%" y="373" width="0.0616%" height="15" fill="rgb(229,88,8)" fg:x="361" fg:w="1"/><text x="22.4791%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="22.2291%" y="357" width="0.0616%" height="15" fill="rgb(213,181,19)" fg:x="361" fg:w="1"/><text x="22.4791%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="22.2291%" y="341" width="0.0616%" height="15" fill="rgb(254,191,54)" fg:x="361" fg:w="1"/><text x="22.4791%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (100 samples, 6.16%)</title><rect x="23.8300%" y="293" width="6.1576%" height="15" fill="rgb(241,83,37)" fg:x="387" fg:w="100"/><text x="24.0800%" y="303.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (100 samples, 6.16%)</title><rect x="23.8300%" y="277" width="6.1576%" height="15" fill="rgb(233,36,39)" fg:x="387" fg:w="100"/><text x="24.0800%" y="287.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (100 samples, 6.16%)</title><rect x="23.8300%" y="261" width="6.1576%" height="15" fill="rgb(226,3,54)" fg:x="387" fg:w="100"/><text x="24.0800%" y="271.50">&lt;core::h..</text></g><g><title>core::hash::sip::u8to64_le (67 samples, 4.13%)</title><rect x="25.8621%" y="245" width="4.1256%" height="15" fill="rgb(245,192,40)" fg:x="420" fg:w="67"/><text x="26.1121%" y="255.50">core..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23 samples, 1.42%)</title><rect x="35.2833%" y="181" width="1.4163%" height="15" fill="rgb(238,167,29)" fg:x="573" fg:w="23"/><text x="35.5333%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (55 samples, 3.39%)</title><rect x="34.6675%" y="197" width="3.3867%" height="15" fill="rgb(232,182,51)" fg:x="563" fg:w="55"/><text x="34.9175%" y="207.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 1.35%)</title><rect x="36.6995%" y="181" width="1.3547%" height="15" fill="rgb(231,60,39)" fg:x="596" fg:w="22"/><text x="36.9495%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (42 samples, 2.59%)</title><rect x="38.0542%" y="197" width="2.5862%" height="15" fill="rgb(208,69,12)" fg:x="618" fg:w="42"/><text x="38.3042%" y="207.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (183 samples, 11.27%)</title><rect x="29.9877%" y="293" width="11.2685%" height="15" fill="rgb(235,93,37)" fg:x="487" fg:w="183"/><text x="30.2377%" y="303.50">core::hash::impls..</text></g><g><title>core::hash::Hasher::write_isize (183 samples, 11.27%)</title><rect x="29.9877%" y="277" width="11.2685%" height="15" fill="rgb(213,116,39)" fg:x="487" fg:w="183"/><text x="30.2377%" y="287.50">core::hash::Hashe..</text></g><g><title>core::hash::Hasher::write_usize (183 samples, 11.27%)</title><rect x="29.9877%" y="261" width="11.2685%" height="15" fill="rgb(222,207,29)" fg:x="487" fg:w="183"/><text x="30.2377%" y="271.50">core::hash::Hashe..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (162 samples, 9.98%)</title><rect x="31.2808%" y="245" width="9.9754%" height="15" fill="rgb(206,96,30)" fg:x="508" fg:w="162"/><text x="31.5308%" y="255.50">&lt;std::collecti..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (162 samples, 9.98%)</title><rect x="31.2808%" y="229" width="9.9754%" height="15" fill="rgb(218,138,4)" fg:x="508" fg:w="162"/><text x="31.5308%" y="239.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162 samples, 9.98%)</title><rect x="31.2808%" y="213" width="9.9754%" height="15" fill="rgb(250,191,14)" fg:x="508" fg:w="162"/><text x="31.5308%" y="223.50">&lt;core::hash::s..</text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.62%)</title><rect x="40.6404%" y="197" width="0.6158%" height="15" fill="rgb(239,60,40)" fg:x="660" fg:w="10"/><text x="40.8904%" y="207.50"></text></g><g><title>&lt;busy_beaver::turing::State as core::hash::Hash&gt;::hash (297 samples, 18.29%)</title><rect x="23.8300%" y="309" width="18.2882%" height="15" fill="rgb(206,27,48)" fg:x="387" fg:w="297"/><text x="24.0800%" y="319.50">&lt;busy_beaver::turing::State ..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (14 samples, 0.86%)</title><rect x="41.2562%" y="293" width="0.8621%" height="15" fill="rgb(225,35,8)" fg:x="670" fg:w="14"/><text x="41.5062%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (14 samples, 0.86%)</title><rect x="41.2562%" y="277" width="0.8621%" height="15" fill="rgb(250,213,24)" fg:x="670" fg:w="14"/><text x="41.5062%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32 samples, 1.97%)</title><rect x="51.6626%" y="181" width="1.9704%" height="15" fill="rgb(247,123,22)" fg:x="839" fg:w="32"/><text x="51.9126%" y="191.50">c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (86 samples, 5.30%)</title><rect x="50.4926%" y="197" width="5.2956%" height="15" fill="rgb(231,138,38)" fg:x="820" fg:w="86"/><text x="50.7426%" y="207.50">&lt;core:..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 2.16%)</title><rect x="53.6330%" y="181" width="2.1552%" height="15" fill="rgb(231,145,46)" fg:x="871" fg:w="35"/><text x="53.8830%" y="191.50">c..</text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="197" width="0.0616%" height="15" fill="rgb(251,118,11)" fg:x="906" fg:w="1"/><text x="56.0382%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="181" width="0.0616%" height="15" fill="rgb(217,147,25)" fg:x="906" fg:w="1"/><text x="56.0382%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="165" width="0.0616%" height="15" fill="rgb(247,81,37)" fg:x="906" fg:w="1"/><text x="56.0382%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="149" width="0.0616%" height="15" fill="rgb(209,12,38)" fg:x="906" fg:w="1"/><text x="56.0382%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="133" width="0.0616%" height="15" fill="rgb(227,1,9)" fg:x="906" fg:w="1"/><text x="56.0382%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="117" width="0.0616%" height="15" fill="rgb(248,47,43)" fg:x="906" fg:w="1"/><text x="56.0382%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="101" width="0.0616%" height="15" fill="rgb(221,10,30)" fg:x="906" fg:w="1"/><text x="56.0382%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="85" width="0.0616%" height="15" fill="rgb(210,229,1)" fg:x="906" fg:w="1"/><text x="56.0382%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="69" width="0.0616%" height="15" fill="rgb(222,148,37)" fg:x="906" fg:w="1"/><text x="56.0382%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="53" width="0.0616%" height="15" fill="rgb(234,67,33)" fg:x="906" fg:w="1"/><text x="56.0382%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="55.7882%" y="37" width="0.0616%" height="15" fill="rgb(247,98,35)" fg:x="906" fg:w="1"/><text x="56.0382%" y="47.50"></text></g><g><title>core::cmp::min (10 samples, 0.62%)</title><rect x="55.8498%" y="197" width="0.6158%" height="15" fill="rgb(247,138,52)" fg:x="907" fg:w="10"/><text x="56.0998%" y="207.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.62%)</title><rect x="55.8498%" y="181" width="0.6158%" height="15" fill="rgb(213,79,30)" fg:x="907" fg:w="10"/><text x="56.0998%" y="191.50"></text></g><g><title>core::cmp::min_by (10 samples, 0.62%)</title><rect x="55.8498%" y="165" width="0.6158%" height="15" fill="rgb(246,177,23)" fg:x="907" fg:w="10"/><text x="56.0998%" y="175.50"></text></g><g><title>&lt;busy_beaver::turing::Key as core::hash::Hash&gt;::hash (642 samples, 39.53%)</title><rect x="23.1527%" y="325" width="39.5320%" height="15" fill="rgb(230,62,27)" fg:x="376" fg:w="642"/><text x="23.4027%" y="335.50">&lt;busy_beaver::turing::Key as core::hash::Hash&gt;::hash</text></g><g><title>&lt;busy_beaver::turing::Symbol as core::hash::Hash&gt;::hash (334 samples, 20.57%)</title><rect x="42.1182%" y="309" width="20.5665%" height="15" fill="rgb(216,154,8)" fg:x="684" fg:w="334"/><text x="42.3682%" y="319.50">&lt;busy_beaver::turing::Symbol as ..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (334 samples, 20.57%)</title><rect x="42.1182%" y="293" width="20.5665%" height="15" fill="rgb(244,35,45)" fg:x="684" fg:w="334"/><text x="42.3682%" y="303.50">core::hash::impls::&lt;impl core::h..</text></g><g><title>core::hash::Hasher::write_isize (334 samples, 20.57%)</title><rect x="42.1182%" y="277" width="20.5665%" height="15" fill="rgb(251,115,12)" fg:x="684" fg:w="334"/><text x="42.3682%" y="287.50">core::hash::Hasher::write_isize</text></g><g><title>core::hash::Hasher::write_usize (334 samples, 20.57%)</title><rect x="42.1182%" y="261" width="20.5665%" height="15" fill="rgb(240,54,50)" fg:x="684" fg:w="334"/><text x="42.3682%" y="271.50">core::hash::Hasher::write_usize</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (304 samples, 18.72%)</title><rect x="43.9655%" y="245" width="18.7192%" height="15" fill="rgb(233,84,52)" fg:x="714" fg:w="304"/><text x="44.2155%" y="255.50">&lt;std::collections::hash::map:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (304 samples, 18.72%)</title><rect x="43.9655%" y="229" width="18.7192%" height="15" fill="rgb(207,117,47)" fg:x="714" fg:w="304"/><text x="44.2155%" y="239.50">&lt;core::hash::sip::SipHasher13..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (304 samples, 18.72%)</title><rect x="43.9655%" y="213" width="18.7192%" height="15" fill="rgb(249,43,39)" fg:x="714" fg:w="304"/><text x="44.2155%" y="223.50">&lt;core::hash::sip::Hasher&lt;S&gt; a..</text></g><g><title>core::hash::sip::u8to64_le (101 samples, 6.22%)</title><rect x="56.4655%" y="197" width="6.2192%" height="15" fill="rgb(209,38,44)" fg:x="917" fg:w="101"/><text x="56.7155%" y="207.50">core::ha..</text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="181" width="0.0616%" height="15" fill="rgb(236,212,23)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="165" width="0.0616%" height="15" fill="rgb(242,79,21)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="149" width="0.0616%" height="15" fill="rgb(211,96,35)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="133" width="0.0616%" height="15" fill="rgb(253,215,40)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="117" width="0.0616%" height="15" fill="rgb(211,81,21)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="101" width="0.0616%" height="15" fill="rgb(208,190,38)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="62.6232%" y="85" width="0.0616%" height="15" fill="rgb(235,213,38)" fg:x="1017" fg:w="1"/><text x="62.8732%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 0.92%)</title><rect x="65.7635%" y="261" width="0.9236%" height="15" fill="rgb(237,122,38)" fg:x="1068" fg:w="15"/><text x="66.0135%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="245" width="0.3079%" height="15" fill="rgb(244,218,35)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="229" width="0.3079%" height="15" fill="rgb(240,68,47)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="213" width="0.3079%" height="15" fill="rgb(210,16,53)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="197" width="0.3079%" height="15" fill="rgb(235,124,12)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="181" width="0.3079%" height="15" fill="rgb(224,169,11)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="165" width="0.3079%" height="15" fill="rgb(250,166,2)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="149" width="0.3079%" height="15" fill="rgb(242,216,29)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="133" width="0.3079%" height="15" fill="rgb(230,116,27)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="117" width="0.3079%" height="15" fill="rgb(228,99,48)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="101" width="0.3079%" height="15" fill="rgb(253,11,6)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="85" width="0.3079%" height="15" fill="rgb(247,143,39)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="69" width="0.3079%" height="15" fill="rgb(236,97,10)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="66.3793%" y="53" width="0.3079%" height="15" fill="rgb(233,208,19)" fg:x="1078" fg:w="5"/><text x="66.6293%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (54 samples, 3.33%)</title><rect x="64.8399%" y="277" width="3.3251%" height="15" fill="rgb(216,164,2)" fg:x="1053" fg:w="54"/><text x="65.0899%" y="287.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 1.48%)</title><rect x="66.6872%" y="261" width="1.4778%" height="15" fill="rgb(220,129,5)" fg:x="1083" fg:w="24"/><text x="66.9372%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (66 samples, 4.06%)</title><rect x="71.0591%" y="261" width="4.0640%" height="15" fill="rgb(242,17,10)" fg:x="1154" fg:w="66"/><text x="71.3091%" y="271.50">core..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (221 samples, 13.61%)</title><rect x="62.6847%" y="325" width="13.6084%" height="15" fill="rgb(242,107,0)" fg:x="1018" fg:w="221"/><text x="62.9347%" y="335.50">&lt;std::collections::ha..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (221 samples, 13.61%)</title><rect x="62.6847%" y="309" width="13.6084%" height="15" fill="rgb(251,28,31)" fg:x="1018" fg:w="221"/><text x="62.9347%" y="319.50">&lt;core::hash::sip::Sip..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (221 samples, 13.61%)</title><rect x="62.6847%" y="293" width="13.6084%" height="15" fill="rgb(233,223,10)" fg:x="1018" fg:w="221"/><text x="62.9347%" y="303.50">&lt;core::hash::sip::Has..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (132 samples, 8.13%)</title><rect x="68.1650%" y="277" width="8.1281%" height="15" fill="rgb(215,21,27)" fg:x="1107" fg:w="132"/><text x="68.4150%" y="287.50">&lt;core::hash..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19 samples, 1.17%)</title><rect x="75.1232%" y="261" width="1.1700%" height="15" fill="rgb(232,23,21)" fg:x="1220" fg:w="19"/><text x="75.3732%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (923 samples, 56.83%)</title><rect x="22.2906%" y="341" width="56.8350%" height="15" fill="rgb(244,5,23)" fg:x="362" fg:w="923"/><text x="22.5406%" y="351.50">hashbrown::map::make_hash</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (46 samples, 2.83%)</title><rect x="76.2931%" y="325" width="2.8325%" height="15" fill="rgb(226,81,46)" fg:x="1239" fg:w="46"/><text x="76.5431%" y="335.50">&lt;s..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (30 samples, 1.85%)</title><rect x="77.2783%" y="309" width="1.8473%" height="15" fill="rgb(247,70,30)" fg:x="1255" fg:w="30"/><text x="77.5283%" y="319.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (15 samples, 0.92%)</title><rect x="78.2020%" y="293" width="0.9236%" height="15" fill="rgb(212,68,19)" fg:x="1270" fg:w="15"/><text x="78.4520%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (15 samples, 0.92%)</title><rect x="78.2020%" y="277" width="0.9236%" height="15" fill="rgb(240,187,13)" fg:x="1270" fg:w="15"/><text x="78.4520%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (52 samples, 3.20%)</title><rect x="84.1749%" y="261" width="3.2020%" height="15" fill="rgb(223,113,26)" fg:x="1367" fg:w="52"/><text x="84.4249%" y="271.50">has..</text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 5.60%)</title><rect x="83.0049%" y="293" width="5.6034%" height="15" fill="rgb(206,192,2)" fg:x="1348" fg:w="91"/><text x="83.2549%" y="303.50">&lt;hashbr..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 4.43%)</title><rect x="84.1749%" y="277" width="4.4335%" height="15" fill="rgb(241,108,4)" fg:x="1367" fg:w="72"/><text x="84.4249%" y="287.50">&lt;hash..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (20 samples, 1.23%)</title><rect x="87.3768%" y="261" width="1.2315%" height="15" fill="rgb(247,173,49)" fg:x="1419" fg:w="20"/><text x="87.6268%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 7.57%)</title><rect x="83.0049%" y="309" width="7.5739%" height="15" fill="rgb(224,114,35)" fg:x="1348" fg:w="123"/><text x="83.2549%" y="319.50">&lt;hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (32 samples, 1.97%)</title><rect x="88.6084%" y="293" width="1.9704%" height="15" fill="rgb(245,159,27)" fg:x="1439" fg:w="32"/><text x="88.8584%" y="303.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (32 samples, 1.97%)</title><rect x="88.6084%" y="277" width="1.9704%" height="15" fill="rgb(245,172,44)" fg:x="1439" fg:w="32"/><text x="88.8584%" y="287.50">h..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (32 samples, 1.97%)</title><rect x="88.6084%" y="261" width="1.9704%" height="15" fill="rgb(236,23,11)" fg:x="1439" fg:w="32"/><text x="88.8584%" y="271.50">c..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (81 samples, 4.99%)</title><rect x="90.5788%" y="309" width="4.9877%" height="15" fill="rgb(205,117,38)" fg:x="1471" fg:w="81"/><text x="90.8288%" y="319.50">hashbr..</text></g><g><title>&lt;busy_beaver::turing::Key as core::cmp::PartialEq&gt;::eq (81 samples, 4.99%)</title><rect x="90.5788%" y="293" width="4.9877%" height="15" fill="rgb(237,72,25)" fg:x="1471" fg:w="81"/><text x="90.8288%" y="303.50">&lt;busy_..</text></g><g><title>&lt;busy_beaver::turing::State as core::cmp::PartialEq&gt;::eq (78 samples, 4.80%)</title><rect x="90.7635%" y="277" width="4.8030%" height="15" fill="rgb(244,70,9)" fg:x="1474" fg:w="78"/><text x="91.0135%" y="287.50">&lt;busy_..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (13 samples, 0.80%)</title><rect x="95.5665%" y="261" width="0.8005%" height="15" fill="rgb(217,125,39)" fg:x="1552" fg:w="13"/><text x="95.8165%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (10 samples, 0.62%)</title><rect x="96.3670%" y="261" width="0.6158%" height="15" fill="rgb(235,36,10)" fg:x="1565" fg:w="10"/><text x="96.6170%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10 samples, 0.62%)</title><rect x="96.3670%" y="245" width="0.6158%" height="15" fill="rgb(251,123,47)" fg:x="1565" fg:w="10"/><text x="96.6170%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.62%)</title><rect x="96.3670%" y="229" width="0.6158%" height="15" fill="rgb(221,13,13)" fg:x="1565" fg:w="10"/><text x="96.6170%" y="239.50"></text></g><g><title>busy_beaver::turing::Program::get (1,224 samples, 75.37%)</title><rect x="22.2906%" y="405" width="75.3695%" height="15" fill="rgb(238,131,9)" fg:x="362" fg:w="1224"/><text x="22.5406%" y="415.50">busy_beaver::turing::Program::get</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,224 samples, 75.37%)</title><rect x="22.2906%" y="389" width="75.3695%" height="15" fill="rgb(211,50,8)" fg:x="362" fg:w="1224"/><text x="22.5406%" y="399.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,224 samples, 75.37%)</title><rect x="22.2906%" y="373" width="75.3695%" height="15" fill="rgb(245,182,24)" fg:x="362" fg:w="1224"/><text x="22.5406%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,224 samples, 75.37%)</title><rect x="22.2906%" y="357" width="75.3695%" height="15" fill="rgb(242,14,37)" fg:x="362" fg:w="1224"/><text x="22.5406%" y="367.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (301 samples, 18.53%)</title><rect x="79.1256%" y="341" width="18.5345%" height="15" fill="rgb(246,228,12)" fg:x="1285" fg:w="301"/><text x="79.3756%" y="351.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (301 samples, 18.53%)</title><rect x="79.1256%" y="325" width="18.5345%" height="15" fill="rgb(213,55,15)" fg:x="1285" fg:w="301"/><text x="79.3756%" y="335.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (34 samples, 2.09%)</title><rect x="95.5665%" y="309" width="2.0936%" height="15" fill="rgb(209,9,3)" fg:x="1552" fg:w="34"/><text x="95.8165%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (34 samples, 2.09%)</title><rect x="95.5665%" y="293" width="2.0936%" height="15" fill="rgb(230,59,30)" fg:x="1552" fg:w="34"/><text x="95.8165%" y="303.50">h..</text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (34 samples, 2.09%)</title><rect x="95.5665%" y="277" width="2.0936%" height="15" fill="rgb(209,121,21)" fg:x="1552" fg:w="34"/><text x="95.8165%" y="287.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.68%)</title><rect x="96.9828%" y="261" width="0.6773%" height="15" fill="rgb(220,109,13)" fg:x="1575" fg:w="11"/><text x="97.2328%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (11 samples, 0.68%)</title><rect x="96.9828%" y="245" width="0.6773%" height="15" fill="rgb(232,18,1)" fg:x="1575" fg:w="11"/><text x="97.2328%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (11 samples, 0.68%)</title><rect x="96.9828%" y="229" width="0.6773%" height="15" fill="rgb(215,41,42)" fg:x="1575" fg:w="11"/><text x="97.2328%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (11 samples, 0.68%)</title><rect x="96.9828%" y="213" width="0.6773%" height="15" fill="rgb(224,123,36)" fg:x="1575" fg:w="11"/><text x="97.2328%" y="223.50"></text></g><g><title>__libc_start_main (1,489 samples, 91.69%)</title><rect x="7.9433%" y="677" width="91.6872%" height="15" fill="rgb(240,125,3)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="687.50">__libc_start_main</text></g><g><title>main (1,489 samples, 91.69%)</title><rect x="7.9433%" y="661" width="91.6872%" height="15" fill="rgb(205,98,50)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (1,489 samples, 91.69%)</title><rect x="7.9433%" y="645" width="91.6872%" height="15" fill="rgb(205,185,37)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,489 samples, 91.69%)</title><rect x="7.9433%" y="629" width="91.6872%" height="15" fill="rgb(238,207,15)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,489 samples, 91.69%)</title><rect x="7.9433%" y="613" width="91.6872%" height="15" fill="rgb(213,199,42)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,489 samples, 91.69%)</title><rect x="7.9433%" y="597" width="91.6872%" height="15" fill="rgb(235,201,11)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,489 samples, 91.69%)</title><rect x="7.9433%" y="581" width="91.6872%" height="15" fill="rgb(207,46,11)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,489 samples, 91.69%)</title><rect x="7.9433%" y="565" width="91.6872%" height="15" fill="rgb(241,35,35)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,489 samples, 91.69%)</title><rect x="7.9433%" y="549" width="91.6872%" height="15" fill="rgb(243,32,47)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,489 samples, 91.69%)</title><rect x="7.9433%" y="533" width="91.6872%" height="15" fill="rgb(247,202,23)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,489 samples, 91.69%)</title><rect x="7.9433%" y="517" width="91.6872%" height="15" fill="rgb(219,102,11)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,489 samples, 91.69%)</title><rect x="7.9433%" y="501" width="91.6872%" height="15" fill="rgb(243,110,44)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,489 samples, 91.69%)</title><rect x="7.9433%" y="485" width="91.6872%" height="15" fill="rgb(222,74,54)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,489 samples, 91.69%)</title><rect x="7.9433%" y="469" width="91.6872%" height="15" fill="rgb(216,99,12)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>bb5::main (1,489 samples, 91.69%)</title><rect x="7.9433%" y="453" width="91.6872%" height="15" fill="rgb(226,22,26)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="463.50">bb5::main</text></g><g><title>busy_beaver::turing::Machine::run (1,489 samples, 91.69%)</title><rect x="7.9433%" y="437" width="91.6872%" height="15" fill="rgb(217,163,10)" fg:x="129" fg:w="1489"/><text x="8.1933%" y="447.50">busy_beaver::turing::Machine::run</text></g><g><title>busy_beaver::turing::Machine::step (1,457 samples, 89.72%)</title><rect x="9.9138%" y="421" width="89.7167%" height="15" fill="rgb(213,25,53)" fg:x="161" fg:w="1457"/><text x="10.1638%" y="431.50">busy_beaver::turing::Machine::step</text></g><g><title>busy_beaver::turing::move_to (32 samples, 1.97%)</title><rect x="97.6601%" y="405" width="1.9704%" height="15" fill="rgb(252,105,26)" fg:x="1586" fg:w="32"/><text x="97.9101%" y="415.50">b..</text></g><g><title>bb5 (1,619 samples, 99.69%)</title><rect x="0.0000%" y="709" width="99.6921%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="1619"/><text x="0.2500%" y="719.50">bb5</text></g><g><title>_start (1,490 samples, 91.75%)</title><rect x="7.9433%" y="693" width="91.7488%" height="15" fill="rgb(229,68,48)" fg:x="129" fg:w="1490"/><text x="8.1933%" y="703.50">_start</text></g><g><title>_dl_start (1 samples, 0.06%)</title><rect x="99.6305%" y="677" width="0.0616%" height="15" fill="rgb(252,8,32)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="687.50"></text></g><g><title>_dl_start_final (1 samples, 0.06%)</title><rect x="99.6305%" y="661" width="0.0616%" height="15" fill="rgb(223,20,43)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="671.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.06%)</title><rect x="99.6305%" y="645" width="0.0616%" height="15" fill="rgb(229,81,49)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="655.50"></text></g><g><title>dl_main (1 samples, 0.06%)</title><rect x="99.6305%" y="629" width="0.0616%" height="15" fill="rgb(236,28,36)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="639.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.06%)</title><rect x="99.6305%" y="613" width="0.0616%" height="15" fill="rgb(249,185,26)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="623.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.06%)</title><rect x="99.6305%" y="597" width="0.0616%" height="15" fill="rgb(249,174,33)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="607.50"></text></g><g><title>openaux (1 samples, 0.06%)</title><rect x="99.6305%" y="581" width="0.0616%" height="15" fill="rgb(233,201,37)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="591.50"></text></g><g><title>_dl_map_object (1 samples, 0.06%)</title><rect x="99.6305%" y="565" width="0.0616%" height="15" fill="rgb(221,78,26)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="575.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.06%)</title><rect x="99.6305%" y="549" width="0.0616%" height="15" fill="rgb(250,127,30)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="559.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.06%)</title><rect x="99.6305%" y="533" width="0.0616%" height="15" fill="rgb(230,49,44)" fg:x="1618" fg:w="1"/><text x="99.8805%" y="543.50"></text></g><g><title>all (1,624 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="1624"/><text x="0.2500%" y="735.50"></text></g><g><title>perf (5 samples, 0.31%)</title><rect x="99.6921%" y="709" width="0.3079%" height="15" fill="rgb(249,83,47)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="693" width="0.3079%" height="15" fill="rgb(215,43,3)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="677" width="0.3079%" height="15" fill="rgb(238,154,13)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="661" width="0.3079%" height="15" fill="rgb(219,56,2)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="645" width="0.3079%" height="15" fill="rgb(233,0,4)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="629" width="0.3079%" height="15" fill="rgb(235,30,7)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="613" width="0.3079%" height="15" fill="rgb(250,79,13)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="597" width="0.3079%" height="15" fill="rgb(211,146,34)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="581" width="0.3079%" height="15" fill="rgb(228,22,38)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="565" width="0.3079%" height="15" fill="rgb(235,168,5)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="549" width="0.3079%" height="15" fill="rgb(221,155,16)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="533" width="0.3079%" height="15" fill="rgb(215,215,53)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="517" width="0.3079%" height="15" fill="rgb(223,4,10)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="501" width="0.3079%" height="15" fill="rgb(234,103,6)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="99.6921%" y="485" width="0.3079%" height="15" fill="rgb(227,97,0)" fg:x="1619" fg:w="5"/><text x="99.9421%" y="495.50"></text></g></svg></svg>