<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="725.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="1205"><g><title>&lt;busy_beaver::turing::Tape as core::ops::index::IndexMut&lt;i128&gt;&gt;::index_mut (49 samples, 4.07%)</title><rect x="0.0000%" y="645" width="4.0664%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="49"/><text x="0.2500%" y="655.50">&lt;bus..</text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="645" width="0.0830%" height="15" fill="rgb(217,0,24)" fg:x="49" fg:w="1"/><text x="4.3164%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="629" width="0.0830%" height="15" fill="rgb(221,193,54)" fg:x="49" fg:w="1"/><text x="4.3164%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="613" width="0.0830%" height="15" fill="rgb(248,212,6)" fg:x="49" fg:w="1"/><text x="4.3164%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="597" width="0.0830%" height="15" fill="rgb(208,68,35)" fg:x="49" fg:w="1"/><text x="4.3164%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="581" width="0.0830%" height="15" fill="rgb(232,128,0)" fg:x="49" fg:w="1"/><text x="4.3164%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="565" width="0.0830%" height="15" fill="rgb(207,160,47)" fg:x="49" fg:w="1"/><text x="4.3164%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="549" width="0.0830%" height="15" fill="rgb(228,23,34)" fg:x="49" fg:w="1"/><text x="4.3164%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="4.0664%" y="533" width="0.0830%" height="15" fill="rgb(218,30,26)" fg:x="49" fg:w="1"/><text x="4.3164%" y="543.50"></text></g><g><title>[unknown] (81 samples, 6.72%)</title><rect x="0.0000%" y="661" width="6.7220%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="81"/><text x="0.2500%" y="671.50">[unknown]</text></g><g><title>busy_beaver::turing::Machine::run (31 samples, 2.57%)</title><rect x="4.1494%" y="645" width="2.5726%" height="15" fill="rgb(250,228,42)" fg:x="50" fg:w="31"/><text x="4.3994%" y="655.50">bu..</text></g><g><title>busy_beaver::turing::Machine::step (31 samples, 2.57%)</title><rect x="4.1494%" y="629" width="2.5726%" height="15" fill="rgb(240,193,28)" fg:x="50" fg:w="31"/><text x="4.3994%" y="639.50">bu..</text></g><g><title>busy_beaver::turing::Program::get (19 samples, 1.58%)</title><rect x="5.1452%" y="613" width="1.5768%" height="15" fill="rgb(216,20,37)" fg:x="62" fg:w="19"/><text x="5.3952%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (19 samples, 1.58%)</title><rect x="5.1452%" y="597" width="1.5768%" height="15" fill="rgb(206,188,39)" fg:x="62" fg:w="19"/><text x="5.3952%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (19 samples, 1.58%)</title><rect x="5.1452%" y="581" width="1.5768%" height="15" fill="rgb(217,207,13)" fg:x="62" fg:w="19"/><text x="5.3952%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (19 samples, 1.58%)</title><rect x="5.1452%" y="565" width="1.5768%" height="15" fill="rgb(231,73,38)" fg:x="62" fg:w="19"/><text x="5.3952%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 1.58%)</title><rect x="5.1452%" y="549" width="1.5768%" height="15" fill="rgb(225,20,46)" fg:x="62" fg:w="19"/><text x="5.3952%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="8.6307%" y="389" width="0.0830%" height="15" fill="rgb(210,31,41)" fg:x="104" fg:w="1"/><text x="8.8807%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="8.6307%" y="373" width="0.0830%" height="15" fill="rgb(221,200,47)" fg:x="104" fg:w="1"/><text x="8.8807%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="8.6307%" y="357" width="0.0830%" height="15" fill="rgb(226,26,5)" fg:x="104" fg:w="1"/><text x="8.8807%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="8.6307%" y="341" width="0.0830%" height="15" fill="rgb(249,33,26)" fg:x="104" fg:w="1"/><text x="8.8807%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="357" width="0.0830%" height="15" fill="rgb(235,183,28)" fg:x="207" fg:w="1"/><text x="17.4284%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="341" width="0.0830%" height="15" fill="rgb(221,5,38)" fg:x="207" fg:w="1"/><text x="17.4284%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="325" width="0.0830%" height="15" fill="rgb(247,18,42)" fg:x="207" fg:w="1"/><text x="17.4284%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="309" width="0.0830%" height="15" fill="rgb(241,131,45)" fg:x="207" fg:w="1"/><text x="17.4284%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="293" width="0.0830%" height="15" fill="rgb(249,31,29)" fg:x="207" fg:w="1"/><text x="17.4284%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="277" width="0.0830%" height="15" fill="rgb(225,111,53)" fg:x="207" fg:w="1"/><text x="17.4284%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="261" width="0.0830%" height="15" fill="rgb(238,160,17)" fg:x="207" fg:w="1"/><text x="17.4284%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="245" width="0.0830%" height="15" fill="rgb(214,148,48)" fg:x="207" fg:w="1"/><text x="17.4284%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="229" width="0.0830%" height="15" fill="rgb(232,36,49)" fg:x="207" fg:w="1"/><text x="17.4284%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="17.1784%" y="213" width="0.0830%" height="15" fill="rgb(209,103,24)" fg:x="207" fg:w="1"/><text x="17.4284%" y="223.50"></text></g><g><title>&lt;busy_beaver::turing::Tape as core::ops::index::Index&lt;i128&gt;&gt;::index (30 samples, 2.49%)</title><rect x="16.1826%" y="373" width="2.4896%" height="15" fill="rgb(229,88,8)" fg:x="195" fg:w="30"/><text x="16.4326%" y="383.50">&lt;b..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (17 samples, 1.41%)</title><rect x="17.2614%" y="357" width="1.4108%" height="15" fill="rgb(213,181,19)" fg:x="208" fg:w="17"/><text x="17.5114%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (17 samples, 1.41%)</title><rect x="17.2614%" y="341" width="1.4108%" height="15" fill="rgb(254,191,54)" fg:x="208" fg:w="17"/><text x="17.5114%" y="351.50"></text></g><g><title>&lt;busy_beaver::turing::Tape as core::ops::index::IndexMut&lt;i128&gt;&gt;::index_mut (36 samples, 2.99%)</title><rect x="18.6722%" y="373" width="2.9876%" height="15" fill="rgb(241,83,37)" fg:x="225" fg:w="36"/><text x="18.9222%" y="383.50">&lt;bu..</text></g><g><title>&lt;busy_beaver::turing::Key as core::hash::Hash&gt;::hash (37 samples, 3.07%)</title><rect x="22.5726%" y="293" width="3.0705%" height="15" fill="rgb(233,36,39)" fg:x="272" fg:w="37"/><text x="22.8226%" y="303.50">&lt;bu..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.91%)</title><rect x="30.4564%" y="229" width="0.9129%" height="15" fill="rgb(226,3,54)" fg:x="367" fg:w="11"/><text x="30.7064%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (47 samples, 3.90%)</title><rect x="28.5477%" y="245" width="3.9004%" height="15" fill="rgb(245,192,40)" fg:x="344" fg:w="47"/><text x="28.7977%" y="255.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 1.08%)</title><rect x="31.3693%" y="229" width="1.0788%" height="15" fill="rgb(238,167,29)" fg:x="378" fg:w="13"/><text x="31.6193%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="229" width="0.4149%" height="15" fill="rgb(232,182,51)" fg:x="431" fg:w="5"/><text x="36.0176%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="213" width="0.4149%" height="15" fill="rgb(231,60,39)" fg:x="431" fg:w="5"/><text x="36.0176%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="197" width="0.4149%" height="15" fill="rgb(208,69,12)" fg:x="431" fg:w="5"/><text x="36.0176%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="181" width="0.4149%" height="15" fill="rgb(235,93,37)" fg:x="431" fg:w="5"/><text x="36.0176%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="165" width="0.4149%" height="15" fill="rgb(213,116,39)" fg:x="431" fg:w="5"/><text x="36.0176%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="149" width="0.4149%" height="15" fill="rgb(222,207,29)" fg:x="431" fg:w="5"/><text x="36.0176%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="133" width="0.4149%" height="15" fill="rgb(206,96,30)" fg:x="431" fg:w="5"/><text x="36.0176%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="117" width="0.4149%" height="15" fill="rgb(218,138,4)" fg:x="431" fg:w="5"/><text x="36.0176%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="35.7676%" y="101" width="0.4149%" height="15" fill="rgb(250,191,14)" fg:x="431" fg:w="5"/><text x="36.0176%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.33%)</title><rect x="35.8506%" y="85" width="0.3320%" height="15" fill="rgb(239,60,40)" fg:x="432" fg:w="4"/><text x="36.1006%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.33%)</title><rect x="35.8506%" y="69" width="0.3320%" height="15" fill="rgb(206,27,48)" fg:x="432" fg:w="4"/><text x="36.1006%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.33%)</title><rect x="35.8506%" y="53" width="0.3320%" height="15" fill="rgb(225,35,8)" fg:x="432" fg:w="4"/><text x="36.1006%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.33%)</title><rect x="35.8506%" y="37" width="0.3320%" height="15" fill="rgb(250,213,24)" fg:x="432" fg:w="4"/><text x="36.1006%" y="47.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (74 samples, 6.14%)</title><rect x="36.1826%" y="229" width="6.1411%" height="15" fill="rgb(247,123,22)" fg:x="436" fg:w="74"/><text x="36.4326%" y="239.50">core::nu..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (227 samples, 18.84%)</title><rect x="25.6432%" y="293" width="18.8382%" height="15" fill="rgb(231,138,38)" fg:x="309" fg:w="227"/><text x="25.8932%" y="303.50">&lt;std::collections::hash::map:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (227 samples, 18.84%)</title><rect x="25.6432%" y="277" width="18.8382%" height="15" fill="rgb(231,145,46)" fg:x="309" fg:w="227"/><text x="25.8932%" y="287.50">&lt;core::hash::sip::SipHasher13..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (227 samples, 18.84%)</title><rect x="25.6432%" y="261" width="18.8382%" height="15" fill="rgb(251,118,11)" fg:x="309" fg:w="227"/><text x="25.8932%" y="271.50">&lt;core::hash::sip::Hasher&lt;S&gt; a..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (145 samples, 12.03%)</title><rect x="32.4481%" y="245" width="12.0332%" height="15" fill="rgb(217,147,25)" fg:x="391" fg:w="145"/><text x="32.6981%" y="255.50">&lt;core::hash::sip::..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 2.16%)</title><rect x="42.3237%" y="229" width="2.1577%" height="15" fill="rgb(247,81,37)" fg:x="510" fg:w="26"/><text x="42.5737%" y="239.50">c..</text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="45.3942%" y="277" width="0.0830%" height="15" fill="rgb(209,12,38)" fg:x="547" fg:w="1"/><text x="45.6442%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="45.3942%" y="261" width="0.0830%" height="15" fill="rgb(227,1,9)" fg:x="547" fg:w="1"/><text x="45.6442%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="45.3942%" y="245" width="0.0830%" height="15" fill="rgb(248,47,43)" fg:x="547" fg:w="1"/><text x="45.6442%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="45.3942%" y="229" width="0.0830%" height="15" fill="rgb(221,10,30)" fg:x="547" fg:w="1"/><text x="45.6442%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="45.3942%" y="213" width="0.0830%" height="15" fill="rgb(210,229,1)" fg:x="547" fg:w="1"/><text x="45.6442%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (370 samples, 30.71%)</title><rect x="44.4813%" y="293" width="30.7054%" height="15" fill="rgb(222,148,37)" fg:x="536" fg:w="370"/><text x="44.7313%" y="303.50">&lt;std::collections::hash::map::RandomState as core:..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (358 samples, 29.71%)</title><rect x="45.4772%" y="277" width="29.7095%" height="15" fill="rgb(234,67,33)" fg:x="548" fg:w="358"/><text x="45.7272%" y="287.50">core::hash::sip::SipHasher13::new_with_keys</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (10 samples, 0.83%)</title><rect x="74.3568%" y="261" width="0.8299%" height="15" fill="rgb(247,98,35)" fg:x="896" fg:w="10"/><text x="74.6068%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (10 samples, 0.83%)</title><rect x="74.3568%" y="245" width="0.8299%" height="15" fill="rgb(247,138,52)" fg:x="896" fg:w="10"/><text x="74.6068%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (860 samples, 71.37%)</title><rect x="21.6598%" y="309" width="71.3693%" height="15" fill="rgb(213,79,30)" fg:x="261" fg:w="860"/><text x="21.9098%" y="319.50">hashbrown::map::make_hash</text></g><g><title>core::hash::Hasher::write_u8 (215 samples, 17.84%)</title><rect x="75.1867%" y="293" width="17.8423%" height="15" fill="rgb(246,177,23)" fg:x="906" fg:w="215"/><text x="75.4367%" y="303.50">core::hash::Hasher::write_u8</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (200 samples, 16.60%)</title><rect x="76.4315%" y="277" width="16.5975%" height="15" fill="rgb(230,62,27)" fg:x="921" fg:w="200"/><text x="76.6815%" y="287.50">&lt;std::collections::hash::m..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (200 samples, 16.60%)</title><rect x="76.4315%" y="261" width="16.5975%" height="15" fill="rgb(216,154,8)" fg:x="921" fg:w="200"/><text x="76.6815%" y="271.50">&lt;core::hash::sip::SipHashe..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (200 samples, 16.60%)</title><rect x="76.4315%" y="245" width="16.5975%" height="15" fill="rgb(244,35,45)" fg:x="921" fg:w="200"/><text x="76.6815%" y="255.50">&lt;core::hash::sip::Hasher&lt;S..</text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="92.9461%" y="229" width="0.0830%" height="15" fill="rgb(251,115,12)" fg:x="1120" fg:w="1"/><text x="93.1961%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.07%)</title><rect x="93.7759%" y="261" width="2.0747%" height="15" fill="rgb(240,54,50)" fg:x="1130" fg:w="25"/><text x="94.0259%" y="271.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.83%)</title><rect x="95.0207%" y="245" width="0.8299%" height="15" fill="rgb(233,84,52)" fg:x="1145" fg:w="10"/><text x="95.2707%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (10 samples, 0.83%)</title><rect x="95.0207%" y="229" width="0.8299%" height="15" fill="rgb(207,117,47)" fg:x="1145" fg:w="10"/><text x="95.2707%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 3.40%)</title><rect x="93.7759%" y="277" width="3.4025%" height="15" fill="rgb(249,43,39)" fg:x="1130" fg:w="41"/><text x="94.0259%" y="287.50">&lt;ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (16 samples, 1.33%)</title><rect x="95.8506%" y="261" width="1.3278%" height="15" fill="rgb(209,38,44)" fg:x="1155" fg:w="16"/><text x="96.1006%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (16 samples, 1.33%)</title><rect x="95.8506%" y="245" width="1.3278%" height="15" fill="rgb(236,212,23)" fg:x="1155" fg:w="16"/><text x="96.1006%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (16 samples, 1.33%)</title><rect x="95.8506%" y="229" width="1.3278%" height="15" fill="rgb(242,79,21)" fg:x="1155" fg:w="16"/><text x="96.1006%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8 samples, 0.66%)</title><rect x="97.1784%" y="277" width="0.6639%" height="15" fill="rgb(211,96,35)" fg:x="1171" fg:w="8"/><text x="97.4284%" y="287.50"></text></g><g><title>&lt;busy_beaver::turing::Key as core::cmp::PartialEq&gt;::eq (8 samples, 0.66%)</title><rect x="97.1784%" y="261" width="0.6639%" height="15" fill="rgb(253,215,40)" fg:x="1171" fg:w="8"/><text x="97.4284%" y="271.50"></text></g><g><title>&lt;busy_beaver::turing::State as core::cmp::PartialEq&gt;::eq (8 samples, 0.66%)</title><rect x="97.1784%" y="245" width="0.6639%" height="15" fill="rgb(211,81,21)" fg:x="1171" fg:w="8"/><text x="97.4284%" y="255.50"></text></g><g><title>busy_beaver::turing::Program::get (927 samples, 76.93%)</title><rect x="21.6598%" y="373" width="76.9295%" height="15" fill="rgb(208,190,38)" fg:x="261" fg:w="927"/><text x="21.9098%" y="383.50">busy_beaver::turing::Program::get</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (927 samples, 76.93%)</title><rect x="21.6598%" y="357" width="76.9295%" height="15" fill="rgb(235,213,38)" fg:x="261" fg:w="927"/><text x="21.9098%" y="367.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (927 samples, 76.93%)</title><rect x="21.6598%" y="341" width="76.9295%" height="15" fill="rgb(237,122,38)" fg:x="261" fg:w="927"/><text x="21.9098%" y="351.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (927 samples, 76.93%)</title><rect x="21.6598%" y="325" width="76.9295%" height="15" fill="rgb(244,218,35)" fg:x="261" fg:w="927"/><text x="21.9098%" y="335.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (67 samples, 5.56%)</title><rect x="93.0290%" y="309" width="5.5602%" height="15" fill="rgb(240,68,47)" fg:x="1121" fg:w="67"/><text x="93.2790%" y="319.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (67 samples, 5.56%)</title><rect x="93.0290%" y="293" width="5.5602%" height="15" fill="rgb(210,16,53)" fg:x="1121" fg:w="67"/><text x="93.2790%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (9 samples, 0.75%)</title><rect x="97.8423%" y="277" width="0.7469%" height="15" fill="rgb(235,124,12)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="287.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (9 samples, 0.75%)</title><rect x="97.8423%" y="261" width="0.7469%" height="15" fill="rgb(224,169,11)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="271.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (9 samples, 0.75%)</title><rect x="97.8423%" y="245" width="0.7469%" height="15" fill="rgb(250,166,2)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.75%)</title><rect x="97.8423%" y="229" width="0.7469%" height="15" fill="rgb(242,216,29)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (9 samples, 0.75%)</title><rect x="97.8423%" y="213" width="0.7469%" height="15" fill="rgb(230,116,27)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (9 samples, 0.75%)</title><rect x="97.8423%" y="197" width="0.7469%" height="15" fill="rgb(228,99,48)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="207.50"></text></g><g><title>core::core_arch::simd::i8x16::new (9 samples, 0.75%)</title><rect x="97.8423%" y="181" width="0.7469%" height="15" fill="rgb(253,11,6)" fg:x="1179" fg:w="9"/><text x="98.0923%" y="191.50"></text></g><g><title>__libc_start_main (1,118 samples, 92.78%)</title><rect x="6.7220%" y="645" width="92.7801%" height="15" fill="rgb(247,143,39)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="655.50">__libc_start_main</text></g><g><title>main (1,118 samples, 92.78%)</title><rect x="6.7220%" y="629" width="92.7801%" height="15" fill="rgb(236,97,10)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (1,118 samples, 92.78%)</title><rect x="6.7220%" y="613" width="92.7801%" height="15" fill="rgb(233,208,19)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,118 samples, 92.78%)</title><rect x="6.7220%" y="597" width="92.7801%" height="15" fill="rgb(216,164,2)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,118 samples, 92.78%)</title><rect x="6.7220%" y="581" width="92.7801%" height="15" fill="rgb(220,129,5)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,118 samples, 92.78%)</title><rect x="6.7220%" y="565" width="92.7801%" height="15" fill="rgb(242,17,10)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,118 samples, 92.78%)</title><rect x="6.7220%" y="549" width="92.7801%" height="15" fill="rgb(242,107,0)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,118 samples, 92.78%)</title><rect x="6.7220%" y="533" width="92.7801%" height="15" fill="rgb(251,28,31)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,118 samples, 92.78%)</title><rect x="6.7220%" y="517" width="92.7801%" height="15" fill="rgb(233,223,10)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,118 samples, 92.78%)</title><rect x="6.7220%" y="501" width="92.7801%" height="15" fill="rgb(215,21,27)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,118 samples, 92.78%)</title><rect x="6.7220%" y="485" width="92.7801%" height="15" fill="rgb(232,23,21)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,118 samples, 92.78%)</title><rect x="6.7220%" y="469" width="92.7801%" height="15" fill="rgb(244,5,23)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,118 samples, 92.78%)</title><rect x="6.7220%" y="453" width="92.7801%" height="15" fill="rgb(226,81,46)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,118 samples, 92.78%)</title><rect x="6.7220%" y="437" width="92.7801%" height="15" fill="rgb(247,70,30)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>bb5::main (1,118 samples, 92.78%)</title><rect x="6.7220%" y="421" width="92.7801%" height="15" fill="rgb(212,68,19)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="431.50">bb5::main</text></g><g><title>busy_beaver::turing::Machine::run (1,118 samples, 92.78%)</title><rect x="6.7220%" y="405" width="92.7801%" height="15" fill="rgb(240,187,13)" fg:x="81" fg:w="1118"/><text x="6.9720%" y="415.50">busy_beaver::turing::Machine::run</text></g><g><title>busy_beaver::turing::Machine::step (1,094 samples, 90.79%)</title><rect x="8.7137%" y="389" width="90.7884%" height="15" fill="rgb(223,113,26)" fg:x="105" fg:w="1094"/><text x="8.9637%" y="399.50">busy_beaver::turing::Machine::step</text></g><g><title>busy_beaver::turing::move_to (11 samples, 0.91%)</title><rect x="98.5892%" y="373" width="0.9129%" height="15" fill="rgb(206,192,2)" fg:x="1188" fg:w="11"/><text x="98.8392%" y="383.50"></text></g><g><title>bb5 (1,200 samples, 99.59%)</title><rect x="0.0000%" y="677" width="99.5851%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="1200"/><text x="0.2500%" y="687.50">bb5</text></g><g><title>_start (1,119 samples, 92.86%)</title><rect x="6.7220%" y="661" width="92.8631%" height="15" fill="rgb(247,173,49)" fg:x="81" fg:w="1119"/><text x="6.9720%" y="671.50">_start</text></g><g><title>_dl_start (1 samples, 0.08%)</title><rect x="99.5021%" y="645" width="0.0830%" height="15" fill="rgb(224,114,35)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="655.50"></text></g><g><title>_dl_start_final (1 samples, 0.08%)</title><rect x="99.5021%" y="629" width="0.0830%" height="15" fill="rgb(245,159,27)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="639.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.08%)</title><rect x="99.5021%" y="613" width="0.0830%" height="15" fill="rgb(245,172,44)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="623.50"></text></g><g><title>dl_main (1 samples, 0.08%)</title><rect x="99.5021%" y="597" width="0.0830%" height="15" fill="rgb(236,23,11)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="607.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.08%)</title><rect x="99.5021%" y="581" width="0.0830%" height="15" fill="rgb(205,117,38)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="99.5021%" y="565" width="0.0830%" height="15" fill="rgb(237,72,25)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="575.50"></text></g><g><title>openaux (1 samples, 0.08%)</title><rect x="99.5021%" y="549" width="0.0830%" height="15" fill="rgb(244,70,9)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="559.50"></text></g><g><title>_dl_map_object (1 samples, 0.08%)</title><rect x="99.5021%" y="533" width="0.0830%" height="15" fill="rgb(217,125,39)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="543.50"></text></g><g><title>open_path (1 samples, 0.08%)</title><rect x="99.5021%" y="517" width="0.0830%" height="15" fill="rgb(235,36,10)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="527.50"></text></g><g><title>__GI___xstat (1 samples, 0.08%)</title><rect x="99.5021%" y="501" width="0.0830%" height="15" fill="rgb(251,123,47)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="485" width="0.0830%" height="15" fill="rgb(221,13,13)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="469" width="0.0830%" height="15" fill="rgb(238,131,9)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="453" width="0.0830%" height="15" fill="rgb(211,50,8)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="437" width="0.0830%" height="15" fill="rgb(245,182,24)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="421" width="0.0830%" height="15" fill="rgb(242,14,37)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="405" width="0.0830%" height="15" fill="rgb(246,228,12)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="389" width="0.0830%" height="15" fill="rgb(213,55,15)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="373" width="0.0830%" height="15" fill="rgb(209,9,3)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.5021%" y="357" width="0.0830%" height="15" fill="rgb(230,59,30)" fg:x="1199" fg:w="1"/><text x="99.7521%" y="367.50"></text></g><g><title>all (1,205 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="1205"/><text x="0.2500%" y="703.50"></text></g><g><title>perf (5 samples, 0.41%)</title><rect x="99.5851%" y="677" width="0.4149%" height="15" fill="rgb(220,109,13)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="661" width="0.4149%" height="15" fill="rgb(232,18,1)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="645" width="0.4149%" height="15" fill="rgb(215,41,42)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="629" width="0.4149%" height="15" fill="rgb(224,123,36)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="613" width="0.4149%" height="15" fill="rgb(240,125,3)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="597" width="0.4149%" height="15" fill="rgb(205,98,50)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="581" width="0.4149%" height="15" fill="rgb(205,185,37)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="565" width="0.4149%" height="15" fill="rgb(238,207,15)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="549" width="0.4149%" height="15" fill="rgb(213,199,42)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="533" width="0.4149%" height="15" fill="rgb(235,201,11)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="517" width="0.4149%" height="15" fill="rgb(207,46,11)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="501" width="0.4149%" height="15" fill="rgb(241,35,35)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="485" width="0.4149%" height="15" fill="rgb(243,32,47)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="469" width="0.4149%" height="15" fill="rgb(247,202,23)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.41%)</title><rect x="99.5851%" y="453" width="0.4149%" height="15" fill="rgb(219,102,11)" fg:x="1200" fg:w="5"/><text x="99.8351%" y="463.50"></text></g></svg></svg>